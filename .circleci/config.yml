version: 2

jobs:
  test:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: Setup environment variables
          command: |
            ./mp.sh
      - run:
          name: Setup dependencies
          command: |
            ./mp.sh up
            ./mp.sh composer install
            ./mp.sh schema bundle
      - run:
          name: Run tests
          command: |
            if [ "${CIRCLE_PROJECT_REPONAME##*-}" != "skeleton" ]; then
              ./mp.sh test --no-coverage
            else
              ./mp.sh test skeleton --no-coverage
            fi

  build:
    docker:
      - image: myparcelcom/kubectl-aws
        auth:
          username: ${DOCKER_USER}
          password: ${DOCKER_PASSWORD}
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup environment variables
          command: |
            ./mp.sh
      - run:
          name: Login to Docker Hub
          command: |
            docker login --username ${DOCKER_USER} --password ${DOCKER_PASSWORD}
      - run:
          name: Deploy to docker
          command: |
            ./docker/build.sh ${CIRCLE_PROJECT_REPONAME##*-} $(image_tag)

  deploy_staging:
    machine:
      image: circleci/classic:edge
    steps:
      - run:
          name: Restarting app servers
          command: |
            docker run --rm \
                -e AWS_ACCESS_KEY_ID=${DOCKER_AWS_ACCESS_KEY_ID} \
                -e AWS_SECRET_ACCESS_KEY=${DOCKER_AWS_SECRET_ACCESS_KEY} \
                cgswong/aws:aws elasticbeanstalk restart-app-server \
                    --region eu-central-1 \
                    --environment-name staging-api
            docker run --rm \
                -e AWS_ACCESS_KEY_ID=${DOCKER_AWS_ACCESS_KEY_ID} \
                -e AWS_SECRET_ACCESS_KEY=${DOCKER_AWS_SECRET_ACCESS_KEY} \
                cgswong/aws:aws elasticbeanstalk restart-app-server \
                    --region eu-central-1 \
                    --environment-name staging-worker

  deploy:
    docker:
      - image: myparcelcom/kubectl-aws
        auth:
          username: ${DOCKER_USER}
          password: ${DOCKER_PASSWORD}
    steps:
      - checkout
      - run:
          name: Bootstrap AWS EKS and kubectl
          command: |
            export CLUSTER=$(cluster_name)
            export AWS_ACCESS_KEY=${DEPLOY_AWS_ACCESS_KEY}
            export AWS_SECRET_KEY=${DEPLOY_AWS_SECRET_KEY}
            bootstrap
      - run:
          name: Process templates
          command: |
            export NS=$(env_namespace)
            export ENV_HOST=$(env_host)
            export IMAGE_NAME=${CIRCLE_PROJECT_REPONAME##*-}
            export IMAGE_TAG=$(image_tag)

            eval $(aws-ssm-params ${NS}) # fetch global settings
            eval $(aws-ssm-params ${NS}/${CIRCLE_PROJECT_REPONAME}) # fetch project settings
            $(cat kube/secrets.template.yaml | yq -r '.data | keys[]' | encode_secrets) # base64 encode secrets

            envsubst < kube/configmap.template.yaml > kube/configmap.yaml
            envsubst < kube/secrets.template.yaml > kube/secrets.yaml
            envsubst < kube/deployment.template.yaml > kube/deployment.yaml
            envsubst < kube/service.template.yaml > kube/service.yaml
            envsubst < kube/ingress.template.yaml > kube/ingress.yaml
      - run:
          name: Deploy
          command: |
            kubectl apply -f kube/configmap.yaml
            kubectl apply -f kube/secrets.yaml
            kubectl apply -f kube/deployment.yaml
            kubectl apply -f kube/service.yaml

            if [ "$(env_name)" != "production" ]; then
              kubectl apply -f kube/ingress.yaml
            fi

workflows:
  version: 2

  test:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - master
                - develop

  build_and_deploy:
    jobs:
      - test:
          filters:
            branches:
              only:
                - master
                - develop
      - build:
          requires:
            - test
          filters:
            branches:
              only:
                - master
                - develop
      - deploy_staging:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: develop

  build_and_deploy_tag:
    jobs:
      - test:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+-?\d*$/
            branches:
              ignore: /.*/
      - build:
          requires:
            - test
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+-?\d*$/
            branches:
              ignore: /.*/
